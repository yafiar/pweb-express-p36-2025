generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/* USERS */
model User {
  id        String  @id @default(uuid()) @db.Uuid
  username  String? @db.Text
  password  String  @db.Text
  email     String  @unique @db.Text

  orders    Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@map("users")
}

/* GENRES */
model Genre {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique @db.Text

  books     Book[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt      @map("updated_at")
  deletedAt DateTime?                  @map("deleted_at")

  @@map("genres")
}

/* BOOKS */
model Book {
  id               String   @id @default(uuid()) @db.Uuid
  title            String   @unique @db.Text
  writer           String   @db.Text
  publisher        String   @db.Text
  publicationYear  Int      @map("publication_year")
  description      String?  @db.Text
  price            Decimal  @db.Decimal(12, 2)
  stockQuantity    Int      @map("stock_quantity")

  genreId          String   @map("genre_id") @db.Uuid
  genre            Genre    @relation(fields: [genreId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  orderItems       OrderItem[]

  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt      @map("updated_at")
  deletedAt        DateTime?                @map("deleted_at")

  @@index([genreId])
  @@map("books")
}

/* ORDERS */
model Order {
  id         String      @id @default(uuid()) @db.Uuid
  userId     String      @map("user_id") @db.Uuid
  user       User        @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  orderItems OrderItem[]

  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt      @map("updated_at")

  @@map("orders")
}

/* ORDER ITEMS */
model OrderItem {
  id        String  @id @default(uuid()) @db.Uuid

  quantity  Int
  unitPrice Decimal @db.Decimal(12, 2)
  subtotal  Decimal @db.Decimal(12, 2)

  orderId   String  @map("order_id") @db.Uuid
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  bookId    String  @map("book_id") @db.Uuid
  book      Book    @relation(fields: [bookId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@index([orderId])
  @@index([bookId])
  @@unique([orderId, bookId])
  @@map("order_items")
}
